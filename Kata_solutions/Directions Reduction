// Directions Reduction - https://www.codewars.com/kata/550f22f4d758534c1100025a
//
//Once upon a time, on a way through the old wild west,…
//… a man was given directions to go from one point to another. The directions were "NORTH", "SOUTH", "WEST", "EAST". 
//Clearly "NORTH" and "SOUTH" are opposite, "WEST" and "EAST" too. Going to one direction 
//and coming back the opposite direction is a needless effort. 
//Since this is the wild west, with dreadfull weather and not much water, 
//it's important to save yourself some energy, otherwise you might die of thirst!
//How I crossed the desert the smart way.
//The directions given to the man are, for example, the following:
//["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"].
//or
//{ "NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST" };
//or (haskell)
//[North, South, South, East, West, North, West]
//You can immediatly see that going "NORTH" and then "SOUTH" is not reasonable, 
//better stay to the same place! So the task is to give to the man a simplified version of the plan. 
//
//Task
//Write a function dirReduc which will take an array of strings and 
//returns an array of strings with the needless directions removed (W<->E or S<->N side by side).

class DirReduction
{
public:
    static std::vector<std::string> dirReduc(std::vector<std::string> &arr){

    	std::vector<std::string> solution;
    
    	for (int i = 0; i < arr.size(); ++i) {
      		auto complement = getCompliment(arr[i]);
      
      		bool notLastElement = (i + 1) < arr.size();
      		if ( notLastElement && complement == arr[i + 1]) {
      			  ++i; //skip next element because it is redundant.
      		}
      		else {
      			  solution.push_back(arr[i]);
      		}
          
    	}
    	
    	if (solution == arr) {
    		  return solution;
    	}
      
    	arr = solution;
    	solution = dirReduc(solution);
    	return solution;
    }
    
    static std::string getCompliment(std::string dir) {

      	std::string complement;
      
      	if (dir == "NORTH") {
      		  complement = "SOUTH";
      	}
      	else if (dir == "SOUTH") {
      		  complement = "NORTH";
      	}
      	else if (dir == "EAST") {
      		  complement = "WEST";
      	}
      	else if (dir == "WEST") {
      		  complement = "EAST";
      	}
      
      	return complement;
      }    
};
