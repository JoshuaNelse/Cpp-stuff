// Sum Strings as Numbers - https://www.codewars.com/kata/5324945e2ece5e1f32000370
//
//Given the string representations of two integers, return the string representation of the sum of those integers.
//
//For example:
//
//sumStrings('1','2') // => '3'
//A string representation of an integer will contain no characters besides the ten numerals "0" to "9".


#include <string>
#include <vector>
#include <math.h>
using namespace std;

std::string sum_strings(std::string a, std::string b) {

	// string b will always be the bigger list for simplicity
  if (a.size() > b.size()) {
		swap(a, b);
	}
  // make the lists the same length for simplicity
	while (a.size() != b.size()) {
		a.insert(a.begin(), '0');
	}

	//working off of a's size, because b may need to change length
	int carryOver = 0;
	for (int i = 1; i <= a.size(); i++) {
  
		int digitSum = (a[a.size() - i] - 48) + (b[b.size() - i] - 48); // -48 is the difference from ascii "char" to int
		string numbersString;

		if ((digitSum + carryOver) > 9) {
			if (carryOver) {
				numbersString = to_string((digitSum + carryOver) % 10);
			}
			else {
				numbersString = to_string(digitSum % 10);
				carryOver = 1;
			}
		}
		else {
			if (carryOver) {
				numbersString = to_string(digitSum + 1);
			}
			else {
				numbersString = to_string(digitSum);
			}
      carryOver = 0;
		}
    b[b.size() - i] = numbersString[0];
	}
  //if we need another digit on the end.
	if (carryOver) {
		b.insert(b.begin(), '1');
	}
	while (b.size() > 1 && b[0] == '0') {
		b.erase(b.begin());
	}
  
  return b;
}
